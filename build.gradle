import groovy.json.JsonOutput
import groovy.json.JsonSlurper

plugins {
    id 'fabric-loom' version "${fabric_loom_version}" apply(false)
    id 'org.spongepowered.gradle.vanilla' version "${spongepowered_vanilla_gradle_version}" apply(false)
    id 'org.spongepowered.mixin' version "${spongepowered_mixin_version}" apply(false)
    id 'me.modmuss50.mod-publish-plugin' version "${modmuss50_mod_publish_version}" apply(false)
    id "org.jetbrains.gradle.plugin.idea-ext" version "${jetbrains_gradle_idea_ext_version}"
}

def JAVA_VERSION = 17
def MAX_DISPLAY_ERRORS = "1000"

subprojects {
    apply plugin: 'java'

    java.toolchain.languageVersion = JavaLanguageVersion.of(JAVA_VERSION)
    java.withSourcesJar()
    java.withJavadocJar()

    jar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_name}" }
        }
        manifest {
            attributes([
                    "Specification-Title"     : project.mod_name,
                    "Specification-Vendor"    : project.mod_author,
                    "Specification-Version"   : "1", // We are version 1 of ourselves
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : project.mod_version,
                    "Implementation-Vendor"   : project.mod_author,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
    }

    sourcesJar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_name}" }
        }
    }

    repositories {
        mavenCentral()
        maven {
            name = 'Sponge / Mixin'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
        maven {
            name = 'BlameJared Maven (JEI / CraftTweaker / Bookshelf)'
            url = 'https://maven.blamejared.com'
        }
    }

    tasks.withType(JavaCompile).configureEach {

        it.options.encoding = 'UTF-8'
        it.options.getRelease().set(JAVA_VERSION)
    }

    processResources {
        def expandProps = [
                "fabric_loader_version"     : project.fabric_loader_version,
                "fabric_version"            : project.fabric_version,
                "maven_group"               : project.maven_group, //Else we target the task's group.
                "loader_version_range"      : project.loader_version_range,
                "minecraft_version"         : project.minecraft_version,
                "minecraft_version_range"   : project.minecraft_version_range,
                "mod_author"                : project.mod_author,
                "mod_credits"               : project.mod_credits,
                "mod_description"           : project.mod_description,
                "mod_id"                    : project.mod_id,
                "mod_issues"                : project.mod_issues,
                "mod_license"               : project.mod_license,
                "mod_logo"                  : project.mod_logo,
                "mod_name"                  : project.mod_name,
                "mod_sources"               : project.mod_sources,
                "mod_url"                   : project.mod_url,
                "mod_version"               : project.mod_version,
                "neo_version"               : project.neo_version,
                "neo_version_range"         : project.neo_version_range,
        ]

        filesMatching(['pack.mcmeta', 'fabric.mod.json', '*.mixins.json', 'META-INF/mods.toml']) {
            expand expandProps
        }
        inputs.properties(expandProps)
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        doLast {
            def jsonMinifyStart = System.currentTimeMillis()
            def jsonMinified = 0
            def jsonBytesSaved = 0
            fileTree(dir: outputs.files.asPath, include: '**/*.json').each {
                File file = it
                jsonMinified++
                def oldLength = file.length()
                file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
                jsonBytesSaved += oldLength - file.length()
            }
            println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
        }
    }

    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata).configureEach {

        enabled = false
    }

    // Tells gradle to show 1000 errors instead of the default count of 100.
    // See: https://stackoverflow.com/a/31905248
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xmaxerrs" << MAX_DISPLAY_ERRORS
        }
    }
}