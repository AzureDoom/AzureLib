plugins {
    id 'java-library'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version "${neo_gradle_userdev_version}"
    id 'net.neoforged.gradle.mixin' version "${neo_gradle_mixin_version}"
    id "me.modmuss50.mod-publish-plugin"
}

repositories {
    mavenLocal()
}

base {
    archivesName = "${mod_id}-neo-${minecraft_version}"
}

minecraft.accessTransformers.file file('src/main/resources/META-INF/accesstransformer.cfg')
runs {
    configureEach {
        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"
    compileOnly project(":common")
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: version,
            mod_description     : mod_description,  mod_credits: mod_credits, mod_logo: mod_logo,
            mod_url             : mod_url, mod_issues: mod_issues,
    ]
    inputs.properties replaceProperties
    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('compileJava', JavaCompile).configure {
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}

publishing {
    repositories {
        maven {
            name = project.mod_id
            url = project.maven_url
            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
    publications {
        maven(MavenPublication) {
            artifactId base.archivesName.get()
            artifact jar
            artifact sourcesJar
        }
    }
}

if (file('key.properties').exists()) {
    publishMods {
        def releaseProp = new Properties()
        File secretPropsFile = file("key.properties")
        releaseProp.load(secretPropsFile.newInputStream())
        file = jar.archiveFile
        changelog = rootProject.file("changelog.txt").text
        type = STABLE
        modLoaders.add("neoforge")

        curseforge {
            projectId = project.curseforge_id
            projectSlug = project.mod_id
            accessToken = releaseProp.getProperty("curseKey")
            minecraftVersions.add(project.minecraft_version)
        }
        modrinth {
            projectId = project.modrinth_id
            accessToken = releaseProp.getProperty('modrinthKey')
            minecraftVersions.add(project.minecraft_version)
        }
    }
}