import groovy.json.JsonOutput
import groovy.json.JsonSlurper

plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
    id 'fabric-loom'

    // Custom plugins
    id 'net.darkhax.curseforgegradle' version '1.+'
    id "com.modrinth.minotaur" version "2.+"
}

base {
    archivesName = "${mod_id}-fabric-${minecraft_version}"
}

repositories {
    mavenCentral()
    maven { url 'https://dl.cloudsmith.io/public/azuredoom-mods/azurelib/maven/' }
    maven { url 'https://maven.blamejared.com' }
    maven { url 'https://api.modrinth.com/maven' }
    maven { url "https://cfa2.cursemaven.com" }
    maven { url "https://maven.cloudsmith.io/azuredoom-mods/azurelib/" }
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/" }
    maven { url "https://maven.terraformersmc.com/releases" } // modmenu
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    modCompileOnly "com.terraformersmc:modmenu:7.2.1"
    implementation project(":common")
}

loom {
    if (project(":fabric").file("src/main/resources/${mod_id}.aw").exists()) {
        accessWidenerPath.set(project(":fabric").file("src/main/resources/${mod_id}.aw"))
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}

// TODO: Everything below here might be fine to move to the top-level build.gradle file.
// They were originally in the previous fabric build.gradle. - bvanseg

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

java {
    withSourcesJar()
}

jar {
    from "LICENSE"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = project.archives_base_name
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

publishing {
    repositories {
        maven {
            name = "azurelib"
            url = "https://libs.azuredoom.com:4443/mods"
            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
    publications {
        maven(MavenPublication) {
            groupId = project.maven_group
            artifactId = "${mod_id}-fabric-${minecraft_version}"
            version = project.mod_version
            from components.java
        }
    }
}

processResources {
    doLast {
        def jsonMinifyStart = System.currentTimeMillis()
        def jsonMinified = 0
        def jsonBytesSaved = 0
        fileTree(dir: outputs.files.asPath, include: '**/*.json').each {
            File file = it
            jsonMinified++
            def oldLength = file.length()
            file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            jsonBytesSaved += oldLength - file.length()
        }
        println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
    }
}

if (file('key.properties').exists()) {
    task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
        def curseProp = new Properties()
        File secretPropsFile = file("key.properties")
        curseProp.load(secretPropsFile.newInputStream())
        apiToken = curseProp.getProperty("curseKey")

        def mainFile = upload("817423", remapJar)
        mainFile.releaseType = "release"
        mainFile.changelogType = "text"
        mainFile.addRequirement "fabric-api"
        mainFile.changelog = file("changelog.txt")
        mainFile.addModLoader("Fabric", "Quilt")
        mainFile.addJavaVersion("Java 17")
        mainFile.addGameVersion("1.20.1")
    }
}

if (file('key.properties').exists()) {
    modrinth {
        def modrinthProp = new Properties()
        File secretPropsFile = file("key.properties")
        modrinthProp.load(secretPropsFile.newInputStream())

        token = modrinthProp.getProperty('modrinthKey')
        projectId = '7zlUOZvb'
        versionNumber = project.mod_version
        uploadFile = remapJar
        changelog = rootProject.file("changelog.txt").text
        gameVersions = ['1.20.1']
        versionType = "release"
        loaders = ['fabric', 'quilt']
        dependencies {
            required.project "fabric-api"
        }
    }
}